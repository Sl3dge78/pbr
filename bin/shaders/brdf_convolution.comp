#version 450 core
#extension GL_ARB_shading_language_include : require
#include "common.glsl"

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = COMP_WRITEONLY_TEXTURE_SET, binding = 0, rg16f) uniform writeonly image2D precomputed_BRDF;

float ggx(float nv, float roughness) {
    float r = (roughness);
    float k = (r * r) / 2.0;

    return nv / (nv * (1.0 - k) + k);
}

float geometry(vec3 n, vec3 v, vec3 l, float roughness) {
    float nv = max(dot(n, v), 0.0);
    float nl = max(dot(n, l), 0.0);

    return ggx(nv, roughness) * ggx(nl, roughness);
}

vec2 integrate_brdf(float n_dot_v, float roughness) {
    vec3 v;
    v.x = sqrt(1.0 - n_dot_v * n_dot_v);
    v.y = 0.0;
    v.z = n_dot_v;
    
    float a = 0.0;
    float b = 0.0;

    vec3 n = vec3(0, 0, 1);

    const uint SAMPLE_COUNT = 1024u;
    for(uint i = 0u; i < SAMPLE_COUNT; i++) {
        vec2 xi = hammersley(i, SAMPLE_COUNT);
        vec3 h = ggx_sample(xi, n, roughness);
        vec3 l = normalize(2.0 * dot(v, h) * h - v);

        float n_dot_l = max(l.z, 0.0);
        float n_dot_h = max(h.z, 0.0);
        float v_dot_h = max(dot(v, h), 0.0);

        if(n_dot_l > 0.0) {
            float g = geometry(n, v, l, roughness);
            float g_vis = (g * v_dot_h) / (n_dot_h * n_dot_v);
            float fc = pow(1.0 - v_dot_h, 5.0);

            a += (1.0 - fc) * g_vis;
            b += fc * g_vis;
        } 
    }
    a /= float(SAMPLE_COUNT);
    b /= float(SAMPLE_COUNT);
    return vec2(a, b);
}

void main() {
    ivec2 pos = ivec2(gl_WorkGroupID.xy);
    vec2 result = integrate_brdf(float(pos.x) / gl_NumWorkGroups.x , 1.0 - (float(pos.y) / gl_NumWorkGroups.y));
    imageStore(precomputed_BRDF, pos, vec4(result, 0, 0));
}
