#version 450 core
#extension GL_ARB_shading_language_include : require
#include "common.glsl"

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct InstanceData {
    mat4 xform;
    mat4 inverse;
    vec4 velocity;
};

layout(set = COMP_READONLY_BUFFER_SET, binding = 0) buffer InstanceBuffer {
    InstanceData data[];
};


layout(set = COMP_UNIFORM_BUFFER_SET, binding = 0) uniform GlobalData {
    float delta_time;
    float area_size;
};

void main () {
    // float time_step = 1.0/60.0;
    InstanceData it = data[gl_WorkGroupID.x];
    it.xform[3].xyz += it.velocity.xyz * delta_time;

    if(it.xform[3].x > area_size || it.xform[3].x < -area_size) {
        it.velocity.x *= -1;
    }

    if(it.xform[3].z > area_size || it.xform[3].z < -area_size) {
        it.velocity.z *= -1;
    }
    it.xform[3].xz = clamp(it.xform[3].xz, vec2(-area_size, -area_size), vec2(area_size, area_size));

    if(it.xform[3].y < 0) {
        it.velocity.y *= -0.75;
        it.velocity.xz *= 0.75;
    }
    it.xform[3].y = max(it.xform[3].y, 0);

    it.velocity.y -= 9.81 * delta_time;

    it.inverse = inverse(it.xform);
    data[gl_WorkGroupID.x] = it;
}
